#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
–ó–∞–ø—É—Å–∫: python test_logging.py
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).resolve().parent
sys.path.append(str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sms_analizator_service.settings')
django.setup()

from loguru import logger
from utils.logger_config import (
    setup_logging, 
    log_telegram_event, 
    log_webhook_request, 
    log_database_operation,
    get_api_logger,
    get_telegram_logger,
    get_webhook_logger,
    get_database_logger
)


def test_basic_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ INFO —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ WARNING —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.error("–¢–µ—Å—Ç–æ–≤–æ–µ ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    print("‚úÖ –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


def test_api_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    api_logger = get_api_logger()
    api_logger.info("–¢–µ—Å—Ç–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å")
    api_logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ API –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    api_logger.error("–¢–µ—Å—Ç–æ–≤–∞—è API –æ—à–∏–±–∫–∞")
    
    print("‚úÖ API –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


def test_telegram_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    telegram_logger = get_telegram_logger()
    telegram_logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    log_telegram_event(
        event_type="test_event",
        user_id="123456789",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
        success=True
    )
    
    log_telegram_event(
        event_type="test_error",
        user_id="123456789",
        message="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞",
        success=False
    )
    
    print("‚úÖ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


def test_webhook_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    webhook_logger = get_webhook_logger()
    webhook_logger.info("Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    test_data = {
        'result': {
            'caller_id': 'TEST_SENDER',
            'caller_did': '+71234567890',
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ'
        }
    }
    
    log_webhook_request(
        token="test_token_12345678",
        data=test_data,
        processing_result="Successfully processed"
    )
    
    print("‚úÖ Webhook –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


def test_database_logging():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î."""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î...")
    
    database_logger = get_database_logger()
    database_logger.info("–û–ø–µ—Ä–∞—Ü–∏—è —Å –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    log_database_operation(
        operation="CREATE",
        model="User",
        instance_id=1,
        user_id=1,
        success=True
    )
    
    log_database_operation(
        operation="DELETE",
        model="Rule",
        instance_id=5,
        user_id=1,
        success=False
    )
    
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")


def check_log_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤."""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...")
    
    log_dir = project_root / "logs"
    
    expected_files = [
        "app.log",
        "errors.log", 
        "api.log",
        "telegram_bot.log",
        "webhooks.log",
        "database.log"
    ]
    
    for file_name in expected_files:
        file_path = log_dir / file_name
        if file_path.exists():
            size = file_path.stat().st_size
            print(f"  ‚úÖ {file_name} —Å–æ–∑–¥–∞–Ω ({size} –±–∞–π—Ç)")
        else:
            print(f"  ‚ùå {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SMS –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(project_root)
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_basic_logging()
    print()
    
    test_api_logging()
    print()
    
    test_telegram_logging()
    print()
    
    test_webhook_logging()
    print()
    
    test_database_logging()
    print()
    
    check_log_files()
    print()
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {project_root / 'logs'}")
    print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è —É–±–µ–∂–¥–µ–Ω–∏—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ.")


if __name__ == "__main__":
    main() 